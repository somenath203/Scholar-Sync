// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_DATABASE_URL")
}

model Profile {
  id                                String                   @id @default(uuid())
  fullName                          String
  email                             String                   @unique
  profilePicUrl                     String
  isAdmin                           Boolean                  @default(false)
  isBanned                          Boolean                  @default(false)
  banReason                         String?                  @default("")
  allEssentialYoutubeLinksofTheUser EssentialYoutubeLinks[]
  TopTenQuestionsAnswers            TopTenQuestionsAnswers[]
  RoadMap                           RoadMap[]
}

model EssentialYoutubeLinks {
  id                                       String   @id @default(uuid())
  youtubeVideoName                         String
  youtubeVideoLink                         String
  youtubeVideoDescription                  String
  emailOfTheProfileWhoStoredTheYoutubeLink String
  profile                                  Profile  @relation(fields: [emailOfTheProfileWhoStoredTheYoutubeLink], references: [email], onDelete: Cascade)
  createdAt                                DateTime @default(now())
  updatedAt                                DateTime @updatedAt
}

model TopTenQuestionsAnswers {
  id                                     String   @id @default(uuid())
  topic                                  String
  responseFromModel                      String
  emailOfTheProfileWhoGeneratedTopTenQnA String
  profile                                Profile  @relation(fields: [emailOfTheProfileWhoGeneratedTopTenQnA], references: [email], onDelete: Cascade)
  createdAt                              DateTime @default(now())
  updatedAt                              DateTime @updatedAt
}

model RoadMap {
  id                                   String   @id @default(uuid())
  studentSubjectName                   String
  studentEducationLevel                String
  averageDailyStudyHours               Int
  studentExamName                      String
  daysRemainingUntilExam               Int
  syllabusTopics                       String
  responseFromModel                    String
  emailOfTheProfileWhoGeneratedRoadmap String
  profile                              Profile  @relation(fields: [emailOfTheProfileWhoGeneratedRoadmap], references: [email], onDelete: Cascade)
  createdAt                            DateTime @default(now())
  updatedAt                            DateTime @updatedAt
}
